/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SemaphoreClient,
  SemaphoreClientInterface,
} from "../SemaphoreClient";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Semaphore",
        name: "_semaphore",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "signalIndex",
        type: "uint256",
      },
    ],
    name: "SignalBroadcastByClient",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_signal",
        type: "bytes",
      },
      {
        internalType: "uint256[8]",
        name: "_proof",
        type: "uint256[8]",
      },
      {
        internalType: "uint256",
        name: "_root",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_nullifiersHash",
        type: "uint256",
      },
      {
        internalType: "uint232",
        name: "_externalNullifier",
        type: "uint232",
      },
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "broadcastSignal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getExternalNullifierBySignalIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "getSignalBySignalIndex",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextSignalIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "semaphore",
    outputs: [
      {
        internalType: "contract Semaphore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "signalIndexToExternalNullifier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "signalIndexToSignal",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600060025534801561001557600080fd5b5060405161092338038061092383398101604081905261003491610059565b600380546001600160a01b0319166001600160a01b0392909216919091179055610087565b60006020828403121561006a578081fd5b81516001600160a01b0381168114610080578182fd5b9392505050565b61088d806100966000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638d2d593b1161005b5780638d2d593b1461011e578063911ca41e14610127578063b78015e31461013a578063f9cdb5cd1461014f57600080fd5b806327acf71b14610082578063740afb77146100ab5780637b5d2534146100d9575b600080fd5b610095610090366004610664565b61016f565b6040516100a291906106c7565b60405180910390f35b6100cb6100b9366004610664565b60009081526001602052604090205490565b6040519081526020016100a2565b6003546100f99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a2565b6100cb60025481565b610095610135366004610664565b610209565b61014d610148366004610567565b6102ab565b005b6100cb61015d366004610664565b60016020526000908152604090205481565b60006020819052908152604090208054610188906107c1565b80601f01602080910402602001604051908101604052809291908181526020018280546101b4906107c1565b80156102015780601f106101d657610100808354040283529160200191610201565b820191906000526020600020905b8154815290600101906020018083116101e457829003601f168201915b505050505081565b6000818152602081905260409020805460609190610226906107c1565b80601f0160208091040260200160405190810160405280929190818152602001828054610252906107c1565b801561029f5780601f106102745761010080835404028352916020019161029f565b820191906000526020600020905b81548152906001019060200180831161028257829003601f168201915b50505050509050919050565b6002546000818152602081815260409091208a516102cb928c01906103de565b506002805460009081526001602052604081207cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff881690558154919061030d836107fc565b90915550506003546040517fb78015e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063b78015e390610376908c908c908c908c908c908c908c908c906004016106e1565b600060405180830381600087803b15801561039057600080fd5b505af11580156103a4573d6000803e3d6000fd5b50506040518392507faa676fd106f1023de6c9eafff9af5bc8e299b3493d3aa816a3278a15d055657b9150600090a2505050505050505050565b8280546103ea906107c1565b90600052602060002090601f01602090048101928261040c5760008555610452565b82601f1061042557805160ff1916838001178555610452565b82800160010185558215610452579182015b82811115610452578251825591602001919060010190610437565b5061045e929150610462565b5090565b5b8082111561045e5760008155600101610463565b600082601f830112610487578081fd5b60405161010080820182811067ffffffffffffffff821117156104ac576104ac610841565b60405281848281018710156104bf578485fd5b8492505b60088310156104e3578035825260019290920191602091820191016104c3565b509195945050505050565b60008083601f8401126104ff578182fd5b50813567ffffffffffffffff811115610516578182fd5b60208301915083602082850101111561052e57600080fd5b9250929050565b80357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8116811461056257600080fd5b919050565b6000806000806000806000806101c0898b031215610583578384fd5b883567ffffffffffffffff8082111561059a578586fd5b818b0191508b601f8301126105ad578586fd5b81356020828211156105c1576105c1610841565b6105d381601f19601f85011601610790565b8281528e828487010111156105e6578889fd5b828286018383013780830182018990529b506106048e8e8301610477565b9a5050506101208b013597506101408b013596506106256101608c01610535565b95506101808b013594506101a08b0135915080821115610643578384fd5b506106508b828c016104ee565b999c989b5096995094979396929594505050565b600060208284031215610675578081fd5b5035919050565b60008151808452815b818110156106a157602081850181015186830182015201610685565b818111156106b25782602083870101525b50601f01601f19169290920160200192915050565b6020815260006106da602083018461067c565b9392505050565b60006101c08083526106f58184018c61067c565b905060208084018b845b600881101561071c578151835291830191908301906001016106ff565b50505089610120850152886101408501527cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8816610160850152866101808501528382036101a08501528482528486828401378281868401015280601f19601f870116830101925050509998505050505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156107b9576107b9610841565b604052919050565b600181811c908216806107d557607f821691505b602082108114156107f657634e487b7160e01b600052602260045260246000fd5b50919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561083a57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b5a5f329cc5e6f83b9f7321157d4bd03e1e9a54111c619617cf17c8fa32ae22b64736f6c63430008040033";

type SemaphoreClientConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SemaphoreClientConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SemaphoreClient__factory extends ContractFactory {
  constructor(...args: SemaphoreClientConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SemaphoreClient";
  }

  deploy(
    _semaphore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SemaphoreClient> {
    return super.deploy(
      _semaphore,
      overrides || {}
    ) as Promise<SemaphoreClient>;
  }
  getDeployTransaction(
    _semaphore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_semaphore, overrides || {});
  }
  attach(address: string): SemaphoreClient {
    return super.attach(address) as SemaphoreClient;
  }
  connect(signer: Signer): SemaphoreClient__factory {
    return super.connect(signer) as SemaphoreClient__factory;
  }
  static readonly contractName: "SemaphoreClient";
  public readonly contractName: "SemaphoreClient";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SemaphoreClientInterface {
    return new utils.Interface(_abi) as SemaphoreClientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SemaphoreClient {
    return new Contract(address, _abi, signerOrProvider) as SemaphoreClient;
  }
}
