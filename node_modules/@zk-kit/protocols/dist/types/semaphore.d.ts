import { MerkleProof, SemaphoreWitness, StrBigInt } from "@zk-kit/types";
import ZkProtocol from "./zk-protocol";
export default class Semaphore extends ZkProtocol {
    /**
     * Creates a Semaphore witness for the Semaphore ZK proof.
     * @param identityTrapdoor The identity trapdoor.
     * @param identityNullifier The identity nullifier.
     * @param merkleProof The Merkle proof that identity exists in Semaphore tree.
     * @param externalNullifier The topic on which vote should be broadcasted.
     * @param signal The signal that should be broadcasted.
     * @param shouldHash True if the signal must be hashed before broadcast.
     * @returns The Semaphore witness.
     */
    static genWitness(identityTrapdoor: StrBigInt, identityNullifier: StrBigInt, merkleProof: MerkleProof, externalNullifier: StrBigInt, signal: string, shouldHash?: boolean): SemaphoreWitness;
    /**
     * Generates a nullifier by hashing the external and the identity nullifiers.
     * @param externalNullifier The external nullifier.
     * @param identityNullifier The identity nullifier.
     * @returns The nullifier hash.
     */
    static genNullifierHash(externalNullifier: StrBigInt, identityNullifier: StrBigInt): bigint;
}
